// <auto-generated />
using System;
using LightNote.Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LightNote.Dal.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230118165254_TimestampForTags_Migration_Fix")]
    partial class TimestampForTagsMigrationFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LightNote.Domain.Models.NotebookAggregate.Entities.Insight", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("NotebookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NotebookId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Insights", (string)null);
                });

            modelBuilder.Entity("LightNote.Domain.Models.NotebookAggregate.Entities.InsightPermanentNote", b =>
                {
                    b.Property<Guid>("InsightId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermanentNoteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InsightId", "PermanentNoteId");

                    b.HasIndex("PermanentNoteId");

                    b.ToTable("InsightPermanentNotes", (string)null);
                });

            modelBuilder.Entity("LightNote.Domain.Models.NotebookAggregate.Entities.PermanentNote", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("NotebookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NotebookId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("PermanentNotes", (string)null);
                });

            modelBuilder.Entity("LightNote.Domain.Models.NotebookAggregate.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("InsightId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NotebookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PermanentNoteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InsightId");

                    b.HasIndex("NotebookId");

                    b.HasIndex("PermanentNoteId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Questions", (string)null);
                });

            modelBuilder.Entity("LightNote.Domain.Models.NotebookAggregate.Entities.QuestionReference", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QuestionId", "ReferenceId");

                    b.HasIndex("ReferenceId");

                    b.ToTable("QuestionReferences", (string)null);
                });

            modelBuilder.Entity("LightNote.Domain.Models.NotebookAggregate.Entities.Reference", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsLink")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("NotebookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NotebookId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("References", (string)null);
                });

            modelBuilder.Entity("LightNote.Domain.Models.NotebookAggregate.Entities.ReferenceTag", b =>
                {
                    b.Property<Guid>("ReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReferenceId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ReferenceTags", (string)null);
                });

            modelBuilder.Entity("LightNote.Domain.Models.NotebookAggregate.Entities.SlipNote", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("NotebookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PermanentNoteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NotebookId");

                    b.HasIndex("PermanentNoteId");

                    b.HasIndex("ReferenceId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("SlipNotes", (string)null);
                });

            modelBuilder.Entity("LightNote.Domain.Models.NotebookAggregate.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()");

                    b.HasKey("Id");

                    b.ToTable("Tags", (string)null);
                });

            modelBuilder.Entity("LightNote.Domain.Models.NotebookAggregate.Notebook", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Notebooks", (string)null);
                });

            modelBuilder.Entity("LightNote.Domain.Models.UserProfileAggregate.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LightNote.Domain.Models.NotebookAggregate.Entities.Insight", b =>
                {
                    b.HasOne("LightNote.Domain.Models.NotebookAggregate.Notebook", "Notebook")
                        .WithMany("Insights")
                        .HasForeignKey("NotebookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LightNote.Domain.Models.UserProfileAggregate.UserProfile", "UserProfile")
                        .WithMany("Insights")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Notebook");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("LightNote.Domain.Models.NotebookAggregate.Entities.InsightPermanentNote", b =>
                {
                    b.HasOne("LightNote.Domain.Models.NotebookAggregate.Entities.Insight", "Insight")
                        .WithMany("BasedOnPermanentNotes")
                        .HasForeignKey("InsightId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LightNote.Domain.Models.NotebookAggregate.Entities.PermanentNote", "PermanentNote")
                        .WithMany("Insights")
                        .HasForeignKey("PermanentNoteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Insight");

                    b.Navigation("PermanentNote");
                });

            modelBuilder.Entity("LightNote.Domain.Models.NotebookAggregate.Entities.PermanentNote", b =>
                {
                    b.HasOne("LightNote.Domain.Models.NotebookAggregate.Notebook", "Notebook")
                        .WithMany("PermanentNotes")
                        .HasForeignKey("NotebookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LightNote.Domain.Models.UserProfileAggregate.UserProfile", "UserProfile")
                        .WithMany("PermanentNotes")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Notebook");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("LightNote.Domain.Models.NotebookAggregate.Entities.Question", b =>
                {
                    b.HasOne("LightNote.Domain.Models.NotebookAggregate.Entities.Insight", "Insight")
                        .WithMany("Questions")
                        .HasForeignKey("InsightId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LightNote.Domain.Models.NotebookAggregate.Notebook", "Notebook")
                        .WithMany("Questions")
                        .HasForeignKey("NotebookId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LightNote.Domain.Models.NotebookAggregate.Entities.PermanentNote", "PermanentNote")
                        .WithMany("Questions")
                        .HasForeignKey("PermanentNoteId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LightNote.Domain.Models.UserProfileAggregate.UserProfile", "UserProfile")
                        .WithMany("Questions")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Insight");

                    b.Navigation("Notebook");

                    b.Navigation("PermanentNote");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("LightNote.Domain.Models.NotebookAggregate.Entities.QuestionReference", b =>
                {
                    b.HasOne("LightNote.Domain.Models.NotebookAggregate.Entities.Question", "Question")
                        .WithMany("ReferencesFound")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LightNote.Domain.Models.NotebookAggregate.Entities.Reference", "Reference")
                        .WithMany("RelatedQuestions")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Reference");
                });

            modelBuilder.Entity("LightNote.Domain.Models.NotebookAggregate.Entities.Reference", b =>
                {
                    b.HasOne("LightNote.Domain.Models.NotebookAggregate.Notebook", "Notebook")
                        .WithMany("References")
                        .HasForeignKey("NotebookId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LightNote.Domain.Models.UserProfileAggregate.UserProfile", "UserProfile")
                        .WithMany("References")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Notebook");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("LightNote.Domain.Models.NotebookAggregate.Entities.ReferenceTag", b =>
                {
                    b.HasOne("LightNote.Domain.Models.NotebookAggregate.Entities.Reference", "Reference")
                        .WithMany("TagsAttached")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LightNote.Domain.Models.NotebookAggregate.Entities.Tag", "Tag")
                        .WithMany("ReferencesAttached")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Reference");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("LightNote.Domain.Models.NotebookAggregate.Entities.SlipNote", b =>
                {
                    b.HasOne("LightNote.Domain.Models.NotebookAggregate.Notebook", "Notebook")
                        .WithMany("SlipNotes")
                        .HasForeignKey("NotebookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LightNote.Domain.Models.NotebookAggregate.Entities.PermanentNote", "PermanentNote")
                        .WithMany("SlipNotes")
                        .HasForeignKey("PermanentNoteId");

                    b.HasOne("LightNote.Domain.Models.NotebookAggregate.Entities.Reference", "Reference")
                        .WithMany("SlipNotes")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LightNote.Domain.Models.UserProfileAggregate.UserProfile", "UserProfile")
                        .WithMany("SlipNotes")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Notebook");

                    b.Navigation("PermanentNote");

                    b.Navigation("Reference");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("LightNote.Domain.Models.NotebookAggregate.Notebook", b =>
                {
                    b.HasOne("LightNote.Domain.Models.UserProfileAggregate.UserProfile", "UserProfile")
                        .WithMany("Notebooks")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LightNote.Domain.Models.NotebookAggregate.Entities.Insight", b =>
                {
                    b.Navigation("BasedOnPermanentNotes");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("LightNote.Domain.Models.NotebookAggregate.Entities.PermanentNote", b =>
                {
                    b.Navigation("Insights");

                    b.Navigation("Questions");

                    b.Navigation("SlipNotes");
                });

            modelBuilder.Entity("LightNote.Domain.Models.NotebookAggregate.Entities.Question", b =>
                {
                    b.Navigation("ReferencesFound");
                });

            modelBuilder.Entity("LightNote.Domain.Models.NotebookAggregate.Entities.Reference", b =>
                {
                    b.Navigation("RelatedQuestions");

                    b.Navigation("SlipNotes");

                    b.Navigation("TagsAttached");
                });

            modelBuilder.Entity("LightNote.Domain.Models.NotebookAggregate.Entities.Tag", b =>
                {
                    b.Navigation("ReferencesAttached");
                });

            modelBuilder.Entity("LightNote.Domain.Models.NotebookAggregate.Notebook", b =>
                {
                    b.Navigation("Insights");

                    b.Navigation("PermanentNotes");

                    b.Navigation("Questions");

                    b.Navigation("References");

                    b.Navigation("SlipNotes");
                });

            modelBuilder.Entity("LightNote.Domain.Models.UserProfileAggregate.UserProfile", b =>
                {
                    b.Navigation("Insights");

                    b.Navigation("Notebooks");

                    b.Navigation("PermanentNotes");

                    b.Navigation("Questions");

                    b.Navigation("References");

                    b.Navigation("SlipNotes");
                });
#pragma warning restore 612, 618
        }
    }
}
